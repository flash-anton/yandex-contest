package contest27794;

import java.io.*;

/**
 * <pre>
 * <a href="https://contest.yandex.ru/contest/27794">Яндекс. Тренировки по алгоритмам июнь 2021, занятие 5. Префиксные суммы и два указателя</a>
 * <a href="https://contest.yandex.ru/contest/27794/run-report/94386363">OK  222ms  13.20Mb</a>
 *
 * I. Робот
 * Ограничение времени 	4 секунды
 * Ограничение памяти 	64Mb
 * Ввод 	стандартный ввод или input.txt
 * Вывод 	стандартный вывод или output.txt
 *
 * Студенты одного из вузов спроектировали робота для частичной автоматизации процесса сборки авиационного двигателя.
 *
 * В процессе сборки двигателя могут встречаться операции 26 типов, которые обозначаются строчными буквами латинского алфавита.
 * Процесс сборки состоит из N операций.
 *
 * Предполагается использовать робота один раз для выполнения части подряд идущих операций из процесса сборки.
 *
 * Память робота состоит из K ячеек, каждая из которых содержит одну операцию.
 * Операции выполняются последовательно, начиная с первой, в том порядке, в котором они расположены в памяти.
 * Выполнив последнюю из них, робот продолжает работу с первой.
 * Робота можно остановить после любой операции.
 * Использование робота экономически целесообразно, если он выполнит хотя бы K + 1 операцию.
 *
 * Требуется написать программу, которая по заданному процессу сборки определит количество экономически целесообразных
 * способов использования робота.
 *
 * Формат ввода
 * В первой строке входного файла записано число K > 0 — количество операций, которые можно записать в память робота.
 * Вторая строка состоит из N > K строчных латинских букв, обозначающих операции — процесс сборки двигателя.
 * Операции одного и того же типа обозначаются одной и той же буквой. N ≤ 200000
 *
 * Формат вывода
 * Выходной файл должен содержать единственное целое число — количество экономически целесообразных способов использования робота.
 * </pre>
 */
public class I {
    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));
        alg(reader, writer);
        reader.close();
        writer.close();
    }

    public static void alg(BufferedReader reader, BufferedWriter writer) throws IOException {
        int k = Integer.parseInt(reader.readLine());
        byte[] s = reader.readLine().getBytes();

        long total = 0;
        long sequence = 0;
        for (int L = 0, R = k; R < s.length; L++, R++) {
            if (s[L] == s[R]) {
                sequence++;
            } else {
                total += (1 + sequence) * sequence / 2;
                sequence = 0;
            }
        }
        total += (1 + sequence) * sequence / 2;

        writer.write("" + total);
        writer.flush();
    }
}
